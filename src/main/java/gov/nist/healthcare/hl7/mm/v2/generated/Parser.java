/* Generated By:JavaCC: Do not edit this line. Parser.java */
package gov.nist.healthcare.hl7.mm.v2.generated;
import gov.nist.healthcare.hl7.mm.v2.domain.*;
import gov.nist.healthcare.hl7.mm.v2.nathancode.CommandExecutionException;
import gov.nist.healthcare.hl7.mm.v2.nathancode.Issue;
import gov.nist.healthcare.hl7.mm.v2.nathancode.IssueType;import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;

public class Parser implements ParserConstants {

    public static MMScript parse(String script) throws ParseException, TokenMgrError {
        Parser p = new Parser(new StringReader(script));
        try {
                return p.SCRIPT();
                } catch (TokenMgrError e) {
                throw e;
                } catch (ParseException e) {
                throw e;
                }
    }

    public static String extract(String str) {
                return str.substring(1, str.length()-1);
    }

    public static MMScript parseLineByLine(String script) throws ParseException, TokenMgrError {
        String[] commands = script.split(";");
        MMScript mmScript = new MMScript(new ArrayList<Command>());

        for(String command : commands){
                Parser p = new Parser(new StringReader(command));
                 try {
                 mmScript.getCommands().add(p.COMMAND());
             } catch (TokenMgrError e) {
                 mmScript.getSyntax().add(new Issue(IssueType.Error, e.getMessage()));
             } catch (ParseException e) {
                 mmScript.getSyntax().add(new Issue(IssueType.Error, e.getMessage()));
             }
        }

        return mmScript;
    }

  final public MMScript SCRIPT() throws ParseException {
        List<Command> commands = new ArrayList<Command>();
        Command cmd;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case USE:
      case CALL:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cmd = COMMAND();
      jj_consume_token(22);
                         commands.add(cmd);
    }
    jj_consume_token(0);
    {if (true) return new MMScript(commands);}
    throw new Error("Missing return statement in function");
  }

  final public Command COMMAND() throws ParseException {
  UseCommand use;
  Reference selector = null;
  ConditionalCommand condition;
  AssignmentCommand assignment;
  CallCommand call;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USE:
      use = USE();
                   {if (true) return use;}
      break;
    case IF:
    case FOR:
    case CALL:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        selector = SELECTOR();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        condition = IF(selector);
                                    {if (true) return condition;}
        break;
      case ID:
        assignment = ASSIGNMENT(selector);
                                             {if (true) return assignment;}
        break;
      case CALL:
        call = CALL(selector);
                                 {if (true) return call;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Reference SELECTOR() throws ParseException {
        Reference r;
    jj_consume_token(FOR);
    jj_consume_token(23);
    r = REFERENCE();
                               {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public UseCommand USE() throws ParseException {
        Token key;
        Token value;
    jj_consume_token(USE);
    key = jj_consume_token(UNQUOTED_STRING);
    jj_consume_token(CONTEXT_SELECTOR);
    value = jj_consume_token(UNQUOTED_STRING);
    {if (true) return new UseCommand(key.image, value.image);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalCommand IF(Reference selector) throws ParseException {
        Reference ref;
        Token value;
        Comparator cmp;
        CallCommand call;
    jj_consume_token(IF);
    jj_consume_token(LEFT_PARENTHESIS);
    ref = REFERENCE();
    cmp = COMPARATOR();
    value = jj_consume_token(STRING);
    jj_consume_token(RIGHT_PARENTHESIS);
    jj_consume_token(THEN);
    call = CALL(selector);
          {if (true) return new ConditionalCommand(selector, ref, cmp, Parser.extract(value.image), call);}
    throw new Error("Missing return statement in function");
  }

  final public Comparator COMPARATOR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
                       {if (true) return Comparator.EQ;}
      break;
    case DIFFERENT:
      jj_consume_token(DIFFERENT);
                       {if (true) return Comparator.NE;}
      break;
    case GREATER_THAN:
      jj_consume_token(GREATER_THAN);
                       {if (true) return Comparator.GT;}
      break;
    case LESSER_THAN:
      jj_consume_token(LESSER_THAN);
                       {if (true) return Comparator.LT;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CallCommand CALL(Reference selector) throws ParseException {
        Token name;
        List<Arg> args = new ArrayList<Arg>();
    jj_consume_token(CALL);
    name = jj_consume_token(UNQUOTED_STRING);
    jj_consume_token(LEFT_PARENTHESIS);
    args = ARGS();
    jj_consume_token(RIGHT_PARENTHESIS);
          {if (true) return new CallCommand(selector, name.image, args);}
    throw new Error("Missing return statement in function");
  }

  final public List<Arg> ARGS() throws ParseException {
        List<Arg> args = new ArrayList<Arg>();
        Token arg_name;
        Token arg_value;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      arg_name = jj_consume_token(STRING);
      jj_consume_token(24);
      arg_value = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                                                                 args.add(new Arg(Parser.extract(arg_name.image), Parser.extract(arg_value.image)));
    }
          {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentCommand ASSIGNMENT(Reference selector) throws ParseException {
  Reference ref;
  Value val;
    ref = REFERENCE();
    jj_consume_token(26);
    val = STATEMENT();
                                            {if (true) return new AssignmentCommand(selector, ref, val);}
    throw new Error("Missing return statement in function");
  }

  final public Value STATEMENT() throws ParseException {
        Token value;
        Token preset;
        Reference ref;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      value = jj_consume_token(STRING);
                                 {if (true) return new ConstantValue(Parser.extract(value.image));}
      break;
    case PRESET_VALUE:
      preset = jj_consume_token(PRESET_VALUE);
                                     {if (true) return new PresetValue(preset.image);}
      break;
    case 23:
      jj_consume_token(23);
      ref = REFERENCE();
                                   {if (true) return new ReferenceValue(ref);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Reference REFERENCE() throws ParseException {
        Segment seg = null;
        Reference ref = null;
    seg = SEGMENT();
    ref = X(seg);
                                 {if (true) return ref;}
    throw new Error("Missing return statement in function");
  }

  final public Reference X(Segment seg) throws ParseException {
  HL7Path path;
  Field field = null;
  Component comp = null;
  SubComponent sub = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTEXT_SELECTOR:
      jj_consume_token(CONTEXT_SELECTOR);
      path = PATH();
                                             {if (true) return new Reference(path,seg);}
      break;
    default:
      jj_la1[11] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
        field = FIELD();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          jj_consume_token(28);
          comp = COMPONENT();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 28:
            jj_consume_token(28);
            sub = SUBCOMPONENT();
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                                                                                        {if (true) return new Reference(new HL7Path(seg, field, comp, sub), null);}
    }
    throw new Error("Missing return statement in function");
  }

  final public HL7Path PATH() throws ParseException {
        Segment seg;
        Field field = null;
        Component comp = null;
        SubComponent sub = null;
    seg = SEGMENT();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      field = FIELD();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        jj_consume_token(28);
        comp = COMPONENT();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          jj_consume_token(28);
          sub = SUBCOMPONENT();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
                                                                                                 {if (true) return new HL7Path(seg, field, comp, sub);}
    throw new Error("Missing return statement in function");
  }

  final public Segment SEGMENT() throws ParseException {
        Token id;
        Token instance = null;
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        instance = jj_consume_token(NUM);
        break;
      case 30:
        instance = jj_consume_token(30);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(31);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                                                                         {if (true) return new Segment((String) id.image, instance == null ? "1" : (String) instance.image);}
    throw new Error("Missing return statement in function");
  }

  final public Field FIELD() throws ParseException {
        Token id;
        Token instance = null;
    id = jj_consume_token(NUM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        instance = jj_consume_token(NUM);
        break;
      case 30:
        instance = jj_consume_token(30);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(31);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                                                                         {if (true) return new Field((String) id.image, instance == null ? "1" : (String) instance.image);}
    throw new Error("Missing return statement in function");
  }

  final public Component COMPONENT() throws ParseException {
        Token id;
    id = jj_consume_token(NUM);
                       {if (true) return new Component((String) id.image);}
    throw new Error("Missing return statement in function");
  }

  final public SubComponent SUBCOMPONENT() throws ParseException {
        Token id;
    id = jj_consume_token(NUM);
                       {if (true) return new SubComponent((String) id.image);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x760,0x40,0x620,0x760,0xf0000,0x800,0x2000000,0x802800,0x10000000,0x10000000,0x8000000,0x8000,0x10000000,0x10000000,0x8000000,0x40001000,0x20000000,0x40001000,0x20000000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
